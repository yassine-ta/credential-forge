"""MSG format synthesizer using agent-generated content."""

import random
from pathlib import Path
from typing import Dict, Any

from .format_synthesizer import FormatSynthesizer
from ..utils.exceptions import SynthesizerError


class MSGFormatSynthesizer(FormatSynthesizer):
    """MSG format synthesizer that structures agent-generated content."""
    
    def __init__(self, output_dir: str, ultra_fast_mode: bool = False):
        """Initialize MSG format synthesizer.
        
        Args:
            output_dir: Output directory for generated files
            ultra_fast_mode: Enable ultra-fast mode with minimal validation
        """
        super().__init__(output_dir, ultra_fast_mode)
        self.format_type = 'msg'
    
    def synthesize(self, content_structure: Dict[str, Any]) -> str:
        """Structure content into MSG format.
        
        Args:
            content_structure: Generated content from agents
            
        Returns:
            Path to generated MSG file
        """
        try:
            # Validate content structure
            self._validate_content_structure(content_structure)
            
            # Embed credentials in content
            content_structure = self._embed_credentials_in_content(content_structure)
            
            # Create MSG message
            msg_content = self._create_msg_message(content_structure)
            
            # Generate filename and save
            filename = self._generate_filename(content_structure)
            file_path = self._get_file_path(filename)
            
            # Save MSG file
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(msg_content)
            
            # Log stats
            self._log_generation_stats(content_structure)
            
            return str(file_path)
            
        except Exception as e:
            self.generation_stats['errors'] += 1
            raise SynthesizerError(f"MSG synthesis failed: {e}")
    
    def _create_msg_message(self, content_structure: Dict[str, Any]) -> str:
        """Create MSG message from content structure."""
        metadata = content_structure.get('metadata', {})
        language = content_structure.get('language', 'en')
        sections = content_structure.get('sections', [])
        
        # Create email headers
        sender = metadata.get('sender', 'admin@company.com')
        recipient = metadata.get('recipient', 'team@company.com')
        subject = content_structure.get('title', metadata.get('subject', 'System Update'))
        
        # Create email content
        email_content = f"""From: {sender}
To: {recipient}
Subject: {subject}
Date: {self._get_current_date()}
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 8bit
X-Mailer: CredentialForge/1.0
X-Language: {language}

"""
        
        # Add sections content without visible headers
        for section in sections:
            section_content = section.get('content', '')
            
            # Add content directly without section title headers
            if section_content.strip():
                email_content += f"{section_content}\n\n"
        
        # Add footer
        email_content += f"""
This email contains system configuration information.
Generated by CredentialForge on {self._get_current_date()}.

Best regards,
System Administrator
"""
        
        return email_content
    
    def _get_current_date(self) -> str:
        """Get current date in email format."""
        from datetime import datetime
        return datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')
    
    def _generate_filename(self, content_structure: Dict[str, Any]) -> str:
        """Generate MSG filename."""
        title = content_structure.get('title', 'email')
        timestamp = self._get_current_timestamp()
        random_id = random.randint(1000, 9999)
        
        # Clean title for filename
        clean_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        clean_title = clean_title.replace(' ', '_').lower()
        
        return f"email_{clean_title}_{timestamp}_{random_id}.msg"
    
    def _get_current_timestamp(self) -> str:
        """Get current timestamp for filename."""
        from datetime import datetime
        return datetime.now().strftime('%Y%m%d_%H%M%S')
