[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "credentialforge"
version = "0.1.0"
description = "Synthetic document generation with embedded credentials for security testing"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CredentialForge Contributors", email = "maintainers@credentialforge.org"}
]
maintainers = [
    {name = "CredentialForge Contributors", email = "maintainers@credentialforge.org"}
]
keywords = [
    "security",
    "testing", 
    "credentials",
    "synthetic",
    "documentation",
    "llm",
    "ai",
    "penetration-testing",
    "vulnerability-assessment"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Topic :: Security",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
]
requires-python = ">=3.10"
dependencies = [
    "click>=8.1.0",
    "prompt-toolkit>=3.0.0",
    "python-docx>=0.8.11",
    "openpyxl>=3.1.0",
    "python-pptx>=0.6.21",
    "email-validator>=2.0.0",
    "extract-msg>=0.28.0",
    "llama-cpp-python>=0.2.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "regex>=2023.6.6",
    "pyyaml>=6.0",
    "psutil>=5.9.0",
    "tqdm>=4.65.0",
    "colorama>=0.4.6",
    "structlog>=23.1.0",
    "rich>=13.0.0",
    "cryptography>=41.0.0",
    "validators>=0.20.0",
    "pathlib2>=2.3.7",
    "watchdog>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.2.0",
    "black>=23.3.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.3.0",
    "pre-commit>=3.3.0",
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
    "types-colorama>=0.4.0",
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.60.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=2.0.0",
]
llm = [
    "llama-cpp-python>=0.2.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
]

[project.urls]
Homepage = "https://github.com/your-org/credential-forge"
Documentation = "https://github.com/your-org/credential-forge/docs"
Repository = "https://github.com/your-org/credential-forge"
"Bug Tracker" = "https://github.com/your-org/credential-forge/issues"

[project.scripts]
credentialforge = "credentialforge.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["credentialforge*"]

[tool.setuptools.package-data]
credentialforge = [
    "data/*.json",
    "data/*.yaml", 
    "templates/*.txt",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["credentialforge"]
known_third_party = ["click", "prompt_toolkit", "pandas", "numpy"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "llama_cpp.*",
    "langchain.*",
    "langchain_community.*",
    "extract_msg.*",
    "python_pptx.*",
    "openpyxl.*",
    "docx.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "llm: marks tests that require LLM models",
    "network: marks tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["credentialforge"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
